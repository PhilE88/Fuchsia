import { Field, InputType } from 'type-graphql'
import { ObjectId } from 'mongoose'
import { ObjectIdScalar } from '../utils/object-id.scalar'
import { User } from './User.entity'
import { ModelStringInput } from '../common.input'

@InputType()
export class CreateUserInput {

  @Field({ nullable: false })
  email!: string

  @Field({ nullable: false })
  password!: string

  @Field({ nullable: true })
  user_type?: string

  @Field({ nullable: true })
  asdf?: string
}


@InputType()
export class UpdateUserInput {

  @Field({ nullable: true })
  email?: string

  @Field({ nullable: true })
  password?: string

  @Field({ nullable: true })
  user_type?: string

  @Field({ nullable: true })
  asdf?: string
}


@InputType()
export class DeleteUserInput {
  @Field(type => ObjectIdScalar)
  _id!: ObjectId
}


@InputType()
export class ModelUserConditionalInput {
  @Field(type => ObjectIdScalar)
  _id!: ObjectId

  @Field(type => ModelStringInput, { nullable: true })
  email?: ModelStringInput

  @Field(type => ModelStringInput, { nullable: true })
  password?: ModelStringInput

  @Field(type => ModelStringInput, { nullable: true })
  user_type?: ModelStringInput

  @Field(type => ModelStringInput, { nullable: true })
  asdf?: ModelStringInput

  @Field(type => [ModelUserConditionalInput], { nullable: true })
  and?: ModelUserConditionalInput[]

  @Field(type => [ModelUserConditionalInput], { nullable: true })
  or?: ModelUserConditionalInput[]

  @Field(type => [ModelUserConditionalInput], { nullable: true })
  not?: ModelUserConditionalInput
}


@InputType()
export class ModelUserFilterInput {

  @Field(type => ObjectIdScalar, { nullable: true })
  _id!: ObjectId

  @Field(type => ModelStringInput, { nullable: true })
  email?: ModelStringInput

  @Field(type => ModelStringInput, { nullable: true })
  password?: ModelStringInput

  @Field(type => ModelStringInput, { nullable: true })
  user_type?: ModelStringInput

  @Field(type => ModelStringInput, { nullable: true })
  asdf?: ModelStringInput

  @Field(type => [ModelUserFilterInput], { nullable: true })
  and?: ModelUserFilterInput[]

  @Field(type => [ModelUserFilterInput], { nullable: true })
  or?: ModelUserFilterInput[]

  @Field(type => ModelUserFilterInput, { nullable: true })
  not?: ModelUserFilterInput
}